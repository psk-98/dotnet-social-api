// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_social_api.Data;

#nullable disable

namespace dotnet_social_api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240826103915_finalseeding")]
    partial class finalseeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "03a67502-5fd3-4c0b-b2dd-7507e50f1540",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9619dbce-e238-4c84-a4e3-3f6a1502073f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dotnet_social_api.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Great post! Really enjoyed the insights.",
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 1,
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 2,
                            Body = "Thanks for sharing this information.",
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 2,
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 3,
                            Body = "This was very helpful. Looking forward to more updates!",
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 3,
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 4,
                            Body = "I disagree with some of the points mentioned.",
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 4,
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 5,
                            Body = "Can you provide more details on this topic?",
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 5,
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 6,
                            Body = "Amazing content! Keep up the great work.",
                            CreatedOn = new DateTime(2024, 8, 20, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 6,
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 7,
                            Body = "Very informative, but could use some examples.",
                            CreatedOn = new DateTime(2024, 8, 19, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 7,
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 8,
                            Body = "Nice article. I learned something new today!",
                            CreatedOn = new DateTime(2024, 8, 18, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 8,
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 9,
                            Body = "Good read, but could be more concise.",
                            CreatedOn = new DateTime(2024, 8, 17, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 9,
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 10,
                            Body = "Interesting perspective, thanks for sharing!",
                            CreatedOn = new DateTime(2024, 8, 16, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 10,
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        });
                });

            modelBuilder.Entity("dotnet_social_api.Models.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FolloweeUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FolloweeUserProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FollowerUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FollowerUserProfileId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FolloweeUserProfileId");

                    b.HasIndex("FollowerUserProfileId");

                    b.ToTable("Follows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FolloweeUserId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            FollowerUserId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 2,
                            FolloweeUserId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb",
                            FollowerUserId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 3,
                            FolloweeUserId = "0f6a348a-760e-4f67-8a72-fb1397b43f23",
                            FollowerUserId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 4,
                            FolloweeUserId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b",
                            FollowerUserId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 5,
                            FolloweeUserId = "ed677356-50e3-4640-8077-99db7f391a5b",
                            FollowerUserId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 6,
                            FolloweeUserId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            FollowerUserId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 7,
                            FolloweeUserId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb",
                            FollowerUserId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 8,
                            FolloweeUserId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b",
                            FollowerUserId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 9,
                            FolloweeUserId = "ed677356-50e3-4640-8077-99db7f391a5b",
                            FollowerUserId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 10,
                            FolloweeUserId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            FollowerUserId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        });
                });

            modelBuilder.Entity("dotnet_social_api.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 1,
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 2,
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 3,
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 4,
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            PostId = 5,
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 6,
                            CommentId = 1,
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 7,
                            CommentId = 2,
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 8,
                            CommentId = 3,
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 9,
                            CommentId = 4,
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 10,
                            CommentId = 5,
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        });
                });

            modelBuilder.Entity("dotnet_social_api.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromUserProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageThreadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToUserProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FromUserProfileId");

                    b.HasIndex("MessageThreadId");

                    b.HasIndex("ToUserProfileId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("dotnet_social_api.Models.MessageThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MessageThreads");
                });

            modelBuilder.Entity("dotnet_social_api.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromUserProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToUserProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("FromUserProfileId");

                    b.HasIndex("PostId");

                    b.HasIndex("ToUserProfileId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            IsSeen = false,
                            PostId = 1,
                            ToUserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b",
                            Type = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb",
                            IsSeen = false,
                            PostId = 2,
                            ToUserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            Type = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23",
                            IsSeen = false,
                            PostId = 3,
                            ToUserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb",
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b",
                            IsSeen = false,
                            PostId = 4,
                            ToUserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23",
                            Type = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b",
                            IsSeen = false,
                            PostId = 5,
                            ToUserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b",
                            Type = 3
                        },
                        new
                        {
                            Id = 6,
                            CommentId = 1,
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb",
                            IsSeen = false,
                            ToUserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            Type = 3
                        },
                        new
                        {
                            Id = 7,
                            CommentId = 2,
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23",
                            IsSeen = false,
                            ToUserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb",
                            Type = 3
                        },
                        new
                        {
                            Id = 8,
                            CommentId = 3,
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b",
                            IsSeen = false,
                            ToUserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23",
                            Type = 3
                        },
                        new
                        {
                            Id = 9,
                            CommentId = 4,
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b",
                            IsSeen = false,
                            ToUserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b",
                            Type = 3
                        },
                        new
                        {
                            Id = 10,
                            CommentId = 5,
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            FromUserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            IsSeen = false,
                            ToUserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b",
                            Type = 3
                        });
                });

            modelBuilder.Entity("dotnet_social_api.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Welcome to the system! Excited to have you here.",
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 2,
                            Body = "System maintenance scheduled for tonight.",
                            CreatedOn = new DateTime(2024, 8, 26, 4, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 3,
                            Body = "New feature release notes available in the documentation.",
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 4,
                            Body = "Reminder: Update your profile settings.",
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 5,
                            Body = "Check out the latest system reports.",
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "ed677356-50e3-4640-8077-99db7f391a5b"
                        },
                        new
                        {
                            Id = 6,
                            Body = "Just pushed a new update to the repository.",
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 7,
                            Body = "Working on improving the API performance.",
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 8,
                            Body = "Dev meetup scheduled for next week.",
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 9,
                            Body = "New blog post on best coding practices.",
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 10,
                            Body = "Exploring new tools for developers.",
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6"
                        },
                        new
                        {
                            Id = 11,
                            Body = "Check out the latest design trends.",
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 12,
                            Body = "Redesigned the homepage for a client.",
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 13,
                            Body = "Design tips for creating effective UI.",
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 14,
                            Body = "How to use color theory in design.",
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 15,
                            Body = "Design project management tips.",
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb"
                        },
                        new
                        {
                            Id = 16,
                            Body = "New marketing strategy launched.",
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 17,
                            Body = "Top 5 tips for effective social media marketing.",
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 18,
                            Body = "Exploring new digital marketing tools.",
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 19,
                            Body = "Analyzing the latest marketing trends.",
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 20,
                            Body = "Effective strategies for increasing engagement.",
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "0f6a348a-760e-4f67-8a72-fb1397b43f23"
                        },
                        new
                        {
                            Id = 21,
                            Body = "Support hours extended this week.",
                            CreatedOn = new DateTime(2024, 8, 25, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 22,
                            Body = "New troubleshooting guide available.",
                            CreatedOn = new DateTime(2024, 8, 24, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 23,
                            Body = "How to resolve common support issues.",
                            CreatedOn = new DateTime(2024, 8, 23, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 24,
                            Body = "Tips for better customer support.",
                            CreatedOn = new DateTime(2024, 8, 22, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        },
                        new
                        {
                            Id = 25,
                            Body = "New features in the support portal.",
                            CreatedOn = new DateTime(2024, 8, 21, 10, 39, 15, 147, DateTimeKind.Utc).AddTicks(3120),
                            UserProfileId = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b"
                        });
                });

            modelBuilder.Entity("dotnet_social_api.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ed677356-50e3-4640-8077-99db7f391a5b",
                            AccessFailedCount = 0,
                            Bio = "System Administrator",
                            ConcurrencyStamp = "5a36d751-fd1c-48dc-b591-42bba3d7dd05",
                            DateJoined = new DateTime(2024, 8, 26, 12, 39, 15, 150, DateTimeKind.Local).AddTicks(8160),
                            Email = "admin@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEH7bCKl62vNWoAw65BP0/A3ZG0B+rZLso+K/v3oveN58o6tCgxdOy+uULIdCm3SdRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "749dedc7-9613-4c97-b377-cfac40ce6508",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            Website = "http://localhost"
                        },
                        new
                        {
                            Id = "b31adf09-b1f4-4f2d-bb02-6d1e9f7c65b6",
                            AccessFailedCount = 0,
                            Bio = "Software Developer",
                            ConcurrencyStamp = "ce29618a-5400-4208-853a-a6714178a9e8",
                            DateJoined = new DateTime(2024, 8, 26, 12, 39, 15, 218, DateTimeKind.Local).AddTicks(6710),
                            Email = "devuser@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "DEVUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAECoEyNz2Q3/ajEySddmN+KkJVx/i8TALfZ6JJbNJSpCqWM0m06RSySDNBC3SxBD/9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fda591d8-4964-4426-ab57-7ef7e5228182",
                            TwoFactorEnabled = false,
                            UserName = "DevUser",
                            Website = "http://devsite.local"
                        },
                        new
                        {
                            Id = "4d1cf4a5-4e5d-43d5-bb1d-22a5b0c85dcb",
                            AccessFailedCount = 0,
                            Bio = "Creative Designer",
                            ConcurrencyStamp = "6fd1951a-5501-4eae-86e7-5a363e182eb3",
                            DateJoined = new DateTime(2024, 8, 26, 12, 39, 15, 286, DateTimeKind.Local).AddTicks(3370),
                            Email = "designguru@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "DESIGNGURU",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnpzvRvC0RmQOtO2KIVTPKJD9i+PMnEyiSg4ZS3wLYMje0i10V7RyODx7X9nndyuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04fbff62-4743-4b15-b531-5f5482eb6846",
                            TwoFactorEnabled = false,
                            UserName = "DesignGuru",
                            Website = "http://design.local"
                        },
                        new
                        {
                            Id = "0f6a348a-760e-4f67-8a72-fb1397b43f23",
                            AccessFailedCount = 0,
                            Bio = "Marketing Specialist",
                            ConcurrencyStamp = "f7ab1d65-bc69-4f07-91d1-d16998312bfe",
                            DateJoined = new DateTime(2024, 8, 26, 12, 39, 15, 353, DateTimeKind.Local).AddTicks(9780),
                            Email = "marketer@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MARKETER",
                            PasswordHash = "AQAAAAIAAYagAAAAEExcMta2muW7b/ZyNhYqmo7iNlvGuTx2BnugJEDsI8eBNchDG9Uig3YsUOviGeNNPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9af436f-24cb-41e0-b949-bbef6e1ea563",
                            TwoFactorEnabled = false,
                            UserName = "Marketer",
                            Website = "http://market.local"
                        },
                        new
                        {
                            Id = "a87b2e1e-39a4-4fd1-8237-f013f4e9cf6b",
                            AccessFailedCount = 0,
                            Bio = "Customer Support Tech",
                            ConcurrencyStamp = "91c0e83d-c884-4d10-b66a-3133e13c6a0e",
                            DateJoined = new DateTime(2024, 8, 26, 12, 39, 15, 421, DateTimeKind.Local).AddTicks(5460),
                            Email = "supporttech@localhost",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SUPPORTTECH",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5yOokixgf1RK4ztHViVd6CAnfiDFaRPs3P3yj+W6Eydm8EokFUAuSVPuw0XJc+6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8354110c-8f2e-4fbc-82ad-4c99debba112",
                            TwoFactorEnabled = false,
                            UserName = "SupportTech",
                            Website = "http://support.local"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dotnet_social_api.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dotnet_social_api.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_social_api.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dotnet_social_api.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotnet_social_api.Models.Comment", b =>
                {
                    b.HasOne("dotnet_social_api.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("dotnet_social_api.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("dotnet_social_api.Models.Follow", b =>
                {
                    b.HasOne("dotnet_social_api.Models.UserProfile", "FolloweeUserProfile")
                        .WithMany()
                        .HasForeignKey("FolloweeUserProfileId");

                    b.HasOne("dotnet_social_api.Models.UserProfile", "FollowerUserProfile")
                        .WithMany()
                        .HasForeignKey("FollowerUserProfileId");

                    b.Navigation("FolloweeUserProfile");

                    b.Navigation("FollowerUserProfile");
                });

            modelBuilder.Entity("dotnet_social_api.Models.Like", b =>
                {
                    b.HasOne("dotnet_social_api.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("dotnet_social_api.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("dotnet_social_api.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("dotnet_social_api.Models.Message", b =>
                {
                    b.HasOne("dotnet_social_api.Models.UserProfile", "FromUserProfile")
                        .WithMany()
                        .HasForeignKey("FromUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_social_api.Models.MessageThread", "MessageThread")
                        .WithMany("Messages")
                        .HasForeignKey("MessageThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_social_api.Models.UserProfile", "ToUserProfile")
                        .WithMany()
                        .HasForeignKey("ToUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUserProfile");

                    b.Navigation("MessageThread");

                    b.Navigation("ToUserProfile");
                });

            modelBuilder.Entity("dotnet_social_api.Models.Notification", b =>
                {
                    b.HasOne("dotnet_social_api.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("dotnet_social_api.Models.UserProfile", "FromUserProfile")
                        .WithMany()
                        .HasForeignKey("FromUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_social_api.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("dotnet_social_api.Models.UserProfile", "ToUserProfile")
                        .WithMany()
                        .HasForeignKey("ToUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("FromUserProfile");

                    b.Navigation("Post");

                    b.Navigation("ToUserProfile");
                });

            modelBuilder.Entity("dotnet_social_api.Models.Post", b =>
                {
                    b.HasOne("dotnet_social_api.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("dotnet_social_api.Models.MessageThread", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
